// Code generated by MockGen. DO NOT EDIT.
// Source: /home/superluigi/go/pkg/mod/github.com/threefoldtech/zos@v0.5.6-0.20220823125932-7df5043ab018/pkg/rmb/interface.go

// Package mock_deployer is a generated GoMock package.
package mock_deployer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rmb "github.com/threefoldtech/zos/pkg/rmb"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// Subroute mocks base method.
func (m *MockRouter) Subroute(route string) rmb.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subroute", route)
	ret0, _ := ret[0].(rmb.Router)
	return ret0
}

// Subroute indicates an expected call of Subroute.
func (mr *MockRouterMockRecorder) Subroute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subroute", reflect.TypeOf((*MockRouter)(nil).Subroute), route)
}

// Use mocks base method.
func (m *MockRouter) Use(arg0 rmb.Middleware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Use", arg0)
}

// Use indicates an expected call of Use.
func (mr *MockRouterMockRecorder) Use(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockRouter)(nil).Use), arg0)
}

// WithHandler mocks base method.
func (m *MockRouter) WithHandler(route string, handler rmb.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithHandler", route, handler)
}

// WithHandler indicates an expected call of WithHandler.
func (mr *MockRouterMockRecorder) WithHandler(route, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithHandler", reflect.TypeOf((*MockRouter)(nil).WithHandler), route, handler)
}

// Call mocks base method.
func (m *MockClient) Call(ctx context.Context, twin uint32, fn string, data, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, twin, fn, data, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockClientMockRecorder) Call(ctx, twin, fn, data, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClient)(nil).Call), ctx, twin, fn, data, result)
}
